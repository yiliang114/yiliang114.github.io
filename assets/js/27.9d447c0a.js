(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{470:function(t,a,s){"use strict";s.r(a);var e=s(3),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-原理和操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-原理和操作"}},[t._v("#")]),t._v(" git 原理和操作")]),t._v(" "),a("h2",{attrs:{id:"原理相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理相关"}},[t._v("#")]),t._v(" 原理相关")]),t._v(" "),a("h3",{attrs:{id:"集中式与分布式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集中式与分布式"}},[t._v("#")]),t._v(" 集中式与分布式")]),t._v(" "),a("p",[t._v("Git 属于分布式版本控制系统，而 SVN 属于集中式。")]),t._v(" "),a("p",[t._v("集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。")]),t._v(" "),a("p",[t._v("集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。")]),t._v(" "),a("p",[t._v("集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件的会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。")]),t._v(" "),a("p",[t._v("分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个分支相当于复制一份完整代码。")]),t._v(" "),a("h3",{attrs:{id:"git-的中心服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-的中心服务器"}},[t._v("#")]),t._v(" Git 的中心服务器")]),t._v(" "),a("p",[t._v("Git 的中心服务器用来交换每个用户的修改。没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。Github 就是一种 Git 中心服务器。")]),t._v(" "),a("h3",{attrs:{id:"git-工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流"}},[t._v("#")]),t._v(" Git 工作流")]),t._v(" "),a("p",[t._v("新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。")]),t._v(" "),a("p",[t._v("Git 版本库有一个称为 stage 的暂存区，还有自动创建的 master 分支以及指向分支的 HEAD 指针。")]),t._v(" "),a("ul",[a("li",[t._v("git add files 把文件的修改添加到暂存区")]),t._v(" "),a("li",[t._v("git commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了")]),t._v(" "),a("li",[t._v("git reset -- files 使用当前分支上的修改覆盖暂缓区，用来撤销最后一次 git add files")]),t._v(" "),a("li",[t._v("git checkout -- files 使用暂存区的修改覆盖工作目录，用来撤销本地修改")])]),t._v(" "),a("p",[t._v("可以跳过暂存区域直接从分支中取出修改或者直接提交修改到分支中")]),t._v(" "),a("ul",[a("li",[t._v("git commit -a 直接把所有文件的修改添加到暂缓区然后执行提交")]),t._v(" "),a("li",[t._v("git checkout HEAD -- files 取出最后一次修改，可以用来进行回滚操作")])]),t._v(" "),a("h3",{attrs:{id:"分支实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支实现"}},[t._v("#")]),t._v(" 分支实现")]),t._v(" "),a("p",[t._v("Git 把每次提交都连成一条时间线。分支使用指针来实现，例如 master 分支指针指向时间线的最后一个节点，也就是最后一次提交。HEAD 指针指向的是当前分支。")]),t._v(" "),a("p",[t._v("新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支表示新分支成为当前分支。")]),t._v(" "),a("p",[t._v("每次提交只会让当前分支向前移动，而其它分支不会移动。")]),t._v(" "),a("p",[t._v("合并分支也只需要改变指针即可。")]),t._v(" "),a("h3",{attrs:{id:"冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冲突"}},[t._v("#")]),t._v(" 冲突")]),t._v(" "),a("p",[t._v("当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。")]),t._v(" "),a("p",[t._v("Git 会使用 <<<<<<< ，======= ，>>>>>>> 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Creating a new branch is quick AND simple.\n")])])]),a("h3",{attrs:{id:"fast-forward"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fast-forward"}},[t._v("#")]),t._v(" Fast forward")]),t._v(" "),a("p",[t._v('"快进式合并"（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息。')]),t._v(" "),a("p",[t._v("可以在合并时加上 --no-ff 参数来禁用 Fast forward 模式，并且加上 -m 参数让合并时产生一个新的 commit。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git merge --no-ff -m "merge with no-ff" dev\n')])])]),a("h3",{attrs:{id:"分支管理策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支管理策略"}},[t._v("#")]),t._v(" 分支管理策略")]),t._v(" "),a("p",[t._v("master 分支应该是非常稳定的，只用来发布新版本；")]),t._v(" "),a("p",[t._v("日常开发在开发分支 dev 上进行。")]),t._v(" "),a("h3",{attrs:{id:"储藏-stashing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#储藏-stashing"}},[t._v("#")]),t._v(" 储藏（Stashing）")]),t._v(" "),a("p",[t._v("在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故。")]),t._v(" "),a("p",[t._v("可以使用 git stash 将当前分支的修改储藏起来，此时当前工作区的所有修改都会被存到栈上，也就是说当前工作区是干净的，没有任何未提交的修改。此时就可以安全的切换到其它分支上了。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git stash\nSaved working directory and index state \\ "WIP on master: 049d078 added the index file"\nHEAD is now at 049d078 added the index file (To restore them type "git stash apply")\n')])])]),a("p",[t._v("该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev 分支的未提交修改储藏起来。")]),t._v(" "),a("h3",{attrs:{id:"ssh-传输设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh-传输设置"}},[t._v("#")]),t._v(" SSH 传输设置")]),t._v(" "),a("p",[t._v("Git 仓库和 Github 中心仓库之间是通过 SSH 加密。")]),t._v(" "),a("p",[t._v("如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这两个文件，可以通过以下命令来创建 SSH Key：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ ssh-keygen -t rsa -C "youremail@example.com"\n')])])]),a("p",[t._v('然后把公钥 id_rsa.pub 的内容复制到 Github "Account settings" 的 SSH Keys 中。')]),t._v(" "),a("h3",{attrs:{id:"gitignore-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-文件"}},[t._v("#")]),t._v(" .gitignore 文件")]),t._v(" "),a("p",[t._v("忽略以下文件：")]),t._v(" "),a("ol",[a("li",[t._v("操作系统自动生成的文件，比如缩略图；")]),t._v(" "),a("li",[t._v("编译生成的中间文件，比如 Java 编译产生的 .class 文件；")]),t._v(" "),a("li",[t._v("自己的敏感信息，比如存放口令的配置文件。")])]),t._v(" "),a("p",[t._v("不需要全部自己编写，可以到 "),a("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/github/gitignore"),a("OutboundLink")],1),t._v(" 中进行查询。")]),t._v(" "),a("h2",{attrs:{id:"git-操作相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-操作相关"}},[t._v("#")]),t._v(" Git 操作相关")]),t._v(" "),a("h3",{attrs:{id:"基本配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本配置"}},[t._v("#")]),t._v(" 基本配置")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.name\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.email\n")])])]),a("h3",{attrs:{id:"创建版本库-mkdir-pwd-git-init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建版本库-mkdir-pwd-git-init"}},[t._v("#")]),t._v(" 创建版本库 mkdir -> pwd -> git init")]),t._v(" "),a("p",[t._v("添加，查看状态，比较 git add -> git status -> git diff")]),t._v(" "),a("p",[t._v("提交 git commit -m 'description'")]),t._v(" "),a("p",[t._v("显示历史记录 git log 带参 git log --pretty=oneline")]),t._v(" "),a("h3",{attrs:{id:"版本回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("p",[t._v("git reset --hard HEAD~n\n版本回退（指定的版本号） git reflog -> git reset --hard 版本号")]),t._v(" "),a("h3",{attrs:{id:"工作区和暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作区和暂存区"}},[t._v("#")]),t._v(" 工作区和暂存区")]),t._v(" "),a("p",[t._v("git add 把文件添加到暂存区\ngit commit 把暂存区的所有内容提交到当前分支上")]),t._v(" "),a("h3",{attrs:{id:"git-撤销修改和删除文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-撤销修改和删除文件操作"}},[t._v("#")]),t._v(" Git 撤销修改和删除文件操作")]),t._v(" "),a("p",[t._v("1.撤销修改")]),t._v(" "),a("p",[t._v("方法：\n第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后 add 添加到暂存区，最后 commit 掉。\n第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset –hard HEAD^")]),t._v(" "),a("p",[t._v("更好的方法：\ngit checkout -- readme.txt 丢弃工作区的修改（撤销）\n命令 git checkout -– readme.txt")]),t._v(" "),a("p",[t._v("意思就是，把 readme.txt 文件在工作区做的修改全部撤销，这里有 2 种情况，如下：")]),t._v(" "),a("p",[t._v("1.readme.txt 自动修改后，还没有放到暂存区，使用撤销修改就回到和版本库一模一样的状态。 2.另外一种是 readme.txt 已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。")]),t._v(" "),a("p",[t._v("2.删除文件")]),t._v(" "),a("p",[t._v("rm b.txt 接下来：直接 commit 或者 git checkout -- filename 撤销")]),t._v(" "),a("h3",{attrs:{id:"远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),a("p",[t._v('创建 SSHKey ssh-keygen -t rsa –C "1204183885@qq.com"')]),t._v(" "),a("p",[t._v("1.创建远程库")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin https://github.com/lemongjing/testgit.git\n")])])]),a("p",[t._v("把本地 master 分支的最新修改推送到")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("github上 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" origin master\n")])])]),a("p",[t._v("2.远程库存在\ngit clone")]),t._v(" "),a("h3",{attrs:{id:"创建与合并分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建与合并分支"}},[t._v("#")]),t._v(" 创建与合并分支")]),t._v(" "),a("p",[t._v("每次提交，Git 都把它们串成一条时间线，这条时间线就是一个分支。在 Git 里，这个分支叫主分支，即 master 分支。HEAD 严格来说不是指向提交，而是指向 master，master 才是指向提交的，所以，HEAD 指向的就是当前分支。")]),t._v(" "),a("p",[t._v("创建")]),t._v(" "),a("p",[a("strong",[t._v("git branch dev + git checkout dev = git checkout -b dev 创建并切换到 dev")])]),t._v(" "),a("p",[t._v("合并")]),t._v(" "),a("p",[t._v("在 master 分支下执行 git merge dev 然后删除 dev")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" dev\n")])])]),a("p",[t._v("总结")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("查看分支：git branch\n\n创建分支：git branch name\n\n切换分支：git checkout name\n\n创建+切换分支：git checkout –b name\n\n合并某分支到当前分支：git merge name\n\n删除分支：git branch –d name\n")])])]),a("p",[t._v("1.如何解决冲突")]),t._v(" "),a("p",[t._v("Git 用")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(","),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(","),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("标记出不同分支的内容，其中<<<HEAD 是指主分支修改的内容，>>>>>fenzhi 是指 fenzhi 上修改的内容，我们可以修改下保存。")]),t._v(" "),a("p",[t._v("2.分支管理策略")]),t._v(" "),a("p",[t._v("通常合并分支时，git 一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff 来禁用”Fast forward”模式。首先我们来做 demo 演示下：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("创建一个dev分支。\n修改readme.txt内容。\n添加到暂存区。\n切换回主分支"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("。\n合并dev分支，使用命令 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge –no-ff  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" “注释” dev\n查看历史记录\n")])])]),a("p",[t._v("禁用 fast-forward 模式")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge –-no-ff "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"注释"')]),t._v(" dev\n")])])]),a("p",[t._v("查看分支日志")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--graph")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline --abbrev-commit\n")])])]),a("h3",{attrs:{id:"工作现场"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作现场"}},[t._v("#")]),t._v(" 工作现场")]),t._v(" "),a("p",[t._v("暂存工作现场 git stash")]),t._v(" "),a("p",[t._v("列出工作现场：git stash list")]),t._v(" "),a("p",[t._v("工作现场还在，Git 把 stash 内容存在某个地方了，但是需要恢复一下，可以使用如下 2 个方法：")]),t._v(" "),a("p",[t._v("1.git stash apply 恢复，恢复后，stash 内容并不删除，你需要使用命令 git stash drop 来删除。")]),t._v(" "),a("p",[t._v("2.另一种方式是使用 git stash pop,恢复的同时把 stash 内容也删除了。")]),t._v(" "),a("h3",{attrs:{id:"多人协作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多人协作"}},[t._v("#")]),t._v(" 多人协作")]),t._v(" "),a("p",[t._v("创建本地分支与远程分支的链接")]),t._v(" "),a("p",[a("code",[t._v("git branch --set-upstream-to=origin/<branch> dev")])]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream dev origin/dev\n")])])]),a("p",[t._v("提交\ngit push origin dev\n拉取\ngit pull")]),t._v(" "),a("h3",{attrs:{id:"本地远程分支相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地远程分支相关"}},[t._v("#")]),t._v(" 本地远程分支相关")]),t._v(" "),a("p",[t._v("查看远程分支 git branch -a")]),t._v(" "),a("p",[t._v("删除本地分支：git branch -d name")]),t._v(" "),a("p",[t._v("例，删除了本地 dev")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("* master\n  remotes/origin/dev\n  remotes/origin/master\n")])])]),a("p",[t._v("删除远程分支（两种方法）")]),t._v(" "),a("p",[t._v("git push --delete origin dev")]),t._v(" "),a("p",[t._v("git push origin :dev(冒号前面一个空格)")]),t._v(" "),a("h3",{attrs:{id:"回退和重置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回退和重置"}},[t._v("#")]),t._v(" 回退和重置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset f31658a5\ngit push -f\n")])])]),a("p",[t._v("是直接返回到某一个时间点， 后面的提交都会直接没有了。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git revert -n f31658a5\n")])])]),a("p",[t._v("是会重新生成一个你需要重置提交点的新提交， 指定 revert 提交点后面的所有提交都还在，这样会保证后面的内容还在。")]),t._v(" "),a("h3",{attrs:{id:"变基"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变基"}},[t._v("#")]),t._v(" 变基")]),t._v(" "),a("p",[t._v("中文名好难听，其实就是 git rebase")]),t._v(" "),a("h3",{attrs:{id:"远程不同于本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程不同于本地"}},[t._v("#")]),t._v(" 远程不同于本地")]),t._v(" "),a("p",[t._v("可以通过如下命令进行代码合并【注：pull=fetch+merge]\ngit pull --rebase origin master")]),t._v(" "),a("h3",{attrs:{id:"remote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remote"}},[t._v("#")]),t._v(" remote")]),t._v(" "),a("p",[t._v("添加一个新的 remote")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git remote add myOrigin https://github.com/yiliang114/ant-design-vue.git\n")])])]),a("p",[t._v("remote 重命名")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git remote rename myOrigin origin\n")])])]),a("p",[t._v("设置本地默认 git push 的 remote:\n需要修改 "),a("code",[t._v(".git/config")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[branch "master"]\n  remote = origin\n  merge = refs/heads/master\n')])])]),a("h3",{attrs:{id:"commit-close-issuses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-close-issuses"}},[t._v("#")]),t._v(" Commit Close Issuses")]),t._v(" "),a("p",[t._v("可以通过 close #+issues 序号来关闭 issues，很简单，但它也是有一定条件的。\n起初我以为只用调用这个命令就可以了，无论是在评论、commit 还是 merge 中，今天发现原来不是，在 merge 中使用，当 merge 通过后 issues 会被关闭；在 commit 中使用，只有在 commit 推送到默认分支时才会生效；在评论中使用是没用的。")]),t._v(" "),a("p",[t._v("拉取远程（其他分支）到本地自己的分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git pull origin feature-1.1\n")])])]),a("p",[t._v("合并几个 commit。~number number 代码从当前的 commit 开始往前推几个 commit")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rebase -i HEAD~6\n")])])]),a("p",[t._v("如果 rebase 的是本地的 commit 的话，接下来就直接 git push 就行了。 如果 rebase 的包含远程的 commit ，那就 git push -f。\n但是需要注意的是，git push -f 是强制推送，除非推送的是自己的分支（并且保证没有其他改动，可以才直接推送）才可以这样，不然会将别人的代码覆盖掉。")]),t._v(" "),a("p",[t._v("回退到某一个 commit")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset commitID\n")])])]),a("p",[t._v("暂存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git stash\n")])])]),a("p",[t._v("弹出暂存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git stash pop\n")])])]),a("h3",{attrs:{id:"使用-git-pull-rebase-代替-git-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-git-pull-rebase-代替-git-pull"}},[t._v("#")]),t._v(" 使用 git pull --rebase 代替 git pull")]),t._v(" "),a("p",[t._v("为什么要使用 git pull --rebase？\nhttps://www.jianshu.com/p/dc367c8dca8e")]),t._v(" "),a("p",[t._v("会多出很多 commit 需要 git push --force-with-lease 才能继续往上推")]),t._v(" "),a("h3",{attrs:{id:"force-with-lease"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#force-with-lease"}},[t._v("#")]),t._v(" --force-with-lease")]),t._v(" "),a("p",[t._v("https://www.cnblogs.com/rxbook/p/9341606.html")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git pull --rebase AntDesign develop\ngit push AntDesign 20200102/table-fix --force-with-lease\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);