(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{458:function(e,r,n){"use strict";n.r(r);var a=n(3),t=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"docker-简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-简介"}},[e._v("#")]),e._v(" docker 简介")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://img.shepherd618.cn/docker.jpg",alt:"enter image description here"}}),e._v("\n  docker 是一个开源的应用容器引擎，可以为我们提供安全、可移植、可重复的自动化部署的方式。docker 采用虚拟化的技术来虚拟化出应用程序的运行环境。如上图一样。docker 就像一艘轮船。而轮船上面的每个小箱子可以看成我们需要部署的一个个应用。使用 docker 可以充分利用服务器的系统资源，简化了自动化部署和运维的繁琐流程,减少很多因为开发环境中和生产环境中的不同引发的异常问题。从而提高生产力。\n  docker 三个核心概念如下：")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("镜像（images）：一个只读的模板，可以理解为应用程序的运行环境，包含了程序运行所依赖的环境和基本配置。相当于上图中的每个小箱子里面装的东西。")])]),e._v(" "),r("li",[r("p",[e._v("仓库（repository）：一个用于存放镜像文件的仓库。可以看做和 gitlab 一样。")])]),e._v(" "),r("li",[r("p",[e._v("容器（container）：一个运行应用程序的虚拟容器，他和镜像最大的区别在于容器的最上面那一层是可读可写的。 相当于上图中的每个小箱子里。")])])]),e._v(" "),r("h1",{attrs:{id:"docker-安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装"}},[e._v("#")]),e._v(" docker 安装")]),e._v(" "),r("h2",{attrs:{id:"mac"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mac"}},[e._v("#")]),e._v(" mac")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.docker.com/docker-mac",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网下载地址"),r("OutboundLink")],1),e._v("，点击下载即可。")]),e._v(" "),r("h2",{attrs:{id:"liunx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#liunx"}},[e._v("#")]),e._v(" liunx")]),e._v(" "),r("p",[e._v("打开终端 输入")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("curl https://releases.rancher.com/install-docker/17.12.sh | sh\n")])])]),r("p",[e._v("等待安装完成。检查是否安装成功。\n环境已经安装完毕。现在来开始部署应用吧。")]),e._v(" "),r("h1",{attrs:{id:"docker-实战"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-实战"}},[e._v("#")]),e._v(" docker 实战")]),e._v(" "),r("h2",{attrs:{id:"准备工作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),r("h2",{attrs:{id:"初始化一个-nodejs-程序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#初始化一个-nodejs-程序"}},[e._v("#")]),e._v(" 初始化一个 NodeJs 程序")]),e._v(" "),r("p",[e._v("以下操作必须已经安装了 NodeJS。如果没有安装请参照之前的教程"),r("a",{attrs:{href:"http://shepherd618.cn/2018/01/08/ubuntu%E9%83%A8%E7%BD%B2NodeJs%E7%BA%BF%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门"),r("OutboundLink")],1),e._v("\n首先创建一个空文件夹。并创建以下文件：")]),e._v(" "),r("ul",[r("li",[e._v("server.js")]),e._v(" "),r("li",[e._v("package.json")]),e._v(" "),r("li",[e._v("Dockerfile")]),e._v(" "),r("li",[e._v(".dockerignore")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("mkdir docker_demo\ncd docker_demo\ntouch server.js\ntouch package.json\ntouch Dockerfile\ntouch .dockerignore\n")])])]),r("p",[e._v("然后在 server.js 写入")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const Koa = require('koa');\nconst app = new Koa();\n\napp.use(async ctx => {\n   ctx.body = 'Hello docker';\n});\n\napp.listen(3000);\n")])])]),r("p",[e._v("在 package.json 中写入")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('{\n "name": "docker_demo",\n "version": "0.1.0",\n "private": true,\n "scripts": {\n   "start": "node server.js"\n },\n "dependencies": {\n   "koa": "^2.5.0"\n}\n}\n')])])]),r("p",[e._v("测试程序。控制台输入")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("npm start\n")])])]),r("p",[e._v("浏览器打开"),r("a",{attrs:{href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer"}},[e._v("本地测试"),r("OutboundLink")],1),e._v(",如果如图所示。表示 demo 创建成功。请继续往下。")]),e._v(" "),r("h2",{attrs:{id:"创建-dockerfile-文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建-dockerfile-文件"}},[e._v("#")]),e._v(" 创建 dockerfile 文件")]),e._v(" "),r("p",[e._v("Dockerfile 是由一系列命令和参数构成的脚本，一个 Dockerfile 里面包含了构建整个 image 的完整命令。Docker 通过 docker build 执行 Dockerfile 中的一系列命令自动构建 image.\n在.dockerignore 文件里面写入代码。表示过滤该类型的文件。类似 git 的.gitignore")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n.idea\n.node_modules\nnode_modules\n.vscode\n")])])]),r("p",[e._v("在 Dockerfile 文件中写入以下代码：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('#制定node镜像的版本\nFROM node:8.9-alpine\n#声明作者\nMAINTAINER robin\n#移动当前目录下面的文件到app目录下\nADD . /app/\n#进入到app目录下面，类似cd\nWORKDIR /app\n#安装依赖\nRUN npm install\n#对外暴露的端口\nEXPOSE 3000\n#程序启动脚本\nCMD ["npm", "start"]\n')])])]),r("h2",{attrs:{id:"构建镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[e._v("#")]),e._v(" 构建镜像")]),e._v(" "),r("p",[e._v("使用 build 命令构造镜像,注意后面那个.不能少。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('docker build -t docker_demo .\nrobin:docker_demo robin$ docker build -t docker_demo .\nSending build context to Docker daemon  39.94kB\nStep 1/7 : FROM node:8.9-alpine\n---\x3e 406f227b21f5\nStep 2/7 : MAINTAINER robin\n---\x3e Using cache\n---\x3e 78d6cdbcfee2\nStep 3/7 : ADD . /app/\n---\x3e 2cb30678612d\nStep 4/7 : WORKDIR /app\nRemoving intermediate container e51377081039\n---\x3e c2b7d0f37d2d\nStep 5/7 : RUN npm install\n---\x3e Running in da0c3946ca8d\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nadded 38 packages in 3.323s\nRemoving intermediate container da0c3946ca8d\n---\x3e eecee87f10e2\nStep 6/7 : EXPOSE 3000\n---\x3e Running in f3973cc168a4\nRemoving intermediate container f3973cc168a4\n---\x3e 2671a4c6deb4\nStep 7/7 : CMD ["npm", "start"]\n---\x3e Running in dec529f754aa\nRemoving intermediate container dec529f754aa\n---\x3e 6ec73793d353\nSuccessfully built 6ec73793d353\nSuccessfully tagged docker_demo:latest\n')])])]),r("p",[e._v("等待镜像构造完成。然后使用 images 命令查看镜像。")]),e._v(" "),r("p",[e._v("此时可以看到 images 已经构造完成。现在开始启动 images，并测试。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("#启动镜像 -d表示后台执行，-p 9000:3000表示指定本地的9000端口隐射到容器内的3000端口，docker_demo为镜像名称\ndocker run -d -p 9000:3000 docker_demo\n#查看容器\ndocker ps\n")])])]),r("p",[e._v("此时浏览器打开 http://localhost:9000/,如果如图所示。表示容器运行正常。")]),e._v(" "),r("p",[e._v("如果此时本地无法打开。可以使用 log 命令查看日志。根据日志修改对应出现的对方。")]),e._v(" "),r("h2",{attrs:{id:"绑定-docke-hub"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#绑定-docke-hub"}},[e._v("#")]),e._v(" 绑定 docke hub")]),e._v(" "),r("p",[e._v("镜像已经存在了我们本机硬盘，那我们实际中要么上传到服务器呢？这里通常有 2 个方法。一直是自己搭建镜像仓库比如（harbor）,还有就是官方的 docke hub，类似 gitlab。我们这里先以 docke hub 为列。harbor 放在下篇博客。首先需要注册 docke hub 账号,"),r("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网注册地址"),r("OutboundLink")],1),e._v("。然后登陆。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("robin:docker_demo robin$ docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername:xxxxxx\nPassword:\nLogin Succeeded\nrobin:docker_demo robin$\n")])])]),r("p",[e._v("登陆成功之后。需要给当前 images。添加 tag,并 push")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("#格式docker tag 标签名 用户名/标签名\ndocker tag docker_demo robin365/docker_demo\n#格式docker push 用户名/标签名\ndocker push robin365/docker_demo\n")])])]),r("p",[e._v("完成之后,可以登陆"),r("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("docke hub"),r("OutboundLink")],1),e._v("查看刚刚 push 的镜像。我们可以设置这个镜像是否公开。Public：所有人都可以下载。Private：表示自己才能下载。")]),e._v(" "),r("p",[e._v("这样我们已经把 images 上传到 docke hub 了,在我们需要用到这个 images 的时候可以直接通过 docker pull 命令下载使用了。")]),e._v(" "),r("p",[e._v("到此本教程结束。实际项目中部署可能会出现各种各样的问题，我们需要多查看 log。根据 log 去做相应修改。后面我也会整理出有关 docke 在部署 nodejs 应用中的一些比较容易出错的地方。")]),e._v(" "),r("h1",{attrs:{id:"dockerc-常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dockerc-常用命令"}},[e._v("#")]),e._v(" dockerc 常用命令")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("#查看当前docker版本\ndocker -v\n#查看当前本地所有镜像\ndocker images\n#构造镜像,用法docker build -t 镜像名称 .\ndocker build -t docker_demo .\n#用于容器与主机之间的数据拷贝。用法docker cp 主机文件地址 容器内地址。12d7f14v45cv为容器id。\ndocker cp /www/runoob 12d7f14v45cv:/www/\n#创建一个新的容器并运行，-d为后台执行，-p 9000:3000前面为主机端口，后面是容器端口。docker_demo镜像名\ndocker run -d -p 9000:3000 docker_demo\n#启动已被停止的容器\ndocker start docker_demo\n#关闭已被启动的容器\ndocker stop docker_demo\n#重新启动容器\ndocker restart docker_demo\n#杀掉一个运行中的容器。\ndocker kill -s KILL docker_demo\n#删除一个或多少容器。-f :通过SIGKILL信号强制删除一个运行中的容器-l :移除容器间的网络连接，而非容器本身-v :-v 删除与容器关联的卷\ndocker rm -f docker_demo、docker_demo1\n#在运行的容器中执行命令。104e28f2f072容器id\nsudo docker exec -it 104e28f2f072 /bin/bash\n#列出容器。 -a:所有容器包含没有运行的\ndocker ps\n#获取容器获取容器的日志 104e28f2f072容器id，-t:显示时间戳\ndocker logs -f -t 104e28f2f072\n#登陆镜像仓库\ndocker login\n#获取镜像\ndocker pull\n#上传镜像\ndocker push\n#查看指定镜像的创建历史。\ndocker history docker_demo\n")])])]),r("h1",{attrs:{id:"基于-docker-部署-nodejs-应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基于-docker-部署-nodejs-应用"}},[e._v("#")]),e._v(" 基于 Docker 部署 nodejs 应用")]),e._v(" "),r("h2",{attrs:{id:"背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),r("p",[e._v("公司基于 Vue.js 的项目最近需要部署到云端，因此需要先行在公司内部 Docker 环境下验证相关技术，因而有本文之前提。\n本文展示在 Docker 容器中，应用部署 Nodejs 程序。")]),e._v(" "),r("h2",{attrs:{id:"获取基础镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取基础镜像"}},[e._v("#")]),e._v(" 获取基础镜像")]),e._v(" "),r("p",[e._v("Docker Hub 中有"),r("a",{attrs:{href:"https://hub.docker.com/_/node/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方 node 镜像"),r("OutboundLink")],1),e._v("，按照自己的需求直接获取对应版本的 image 即可。我获取的是"),r("code",[e._v("8.0-alpine")]),e._v("版本，因为基于 alpine 的 node 镜像足够小，仅有 63.7 MB。")]),e._v(" "),r("h2",{attrs:{id:"获取源码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取源码"}},[e._v("#")]),e._v(" 获取源码")]),e._v(" "),r("p",[e._v("从源码库上，获取到整个源代码工程。（过程略）")]),e._v(" "),r("h2",{attrs:{id:"编写-dockerfile"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编写-dockerfile"}},[e._v("#")]),e._v(" 编写 Dockerfile")]),e._v(" "),r("p",[e._v("首先，我们确立文档模型。目录结构如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("~/nodejs\n    Order/        [nodejs源码目录]\n    Dockerfile\n")])])]),r("p",[e._v("Dockerfile 内容如下")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('# 引用镜像\nFROM node:8.0-alpine\n\n# 作者\nMAINTAINER yubing\n\n# 执行命令，创建文件夹\nRUN mkdir -p /home/Order\n\n# 将Order目录拷贝到镜像里\nADD ./Order /home/Order\n\n# 指定工作目录\nWORKDIR /home/Order\n\n# 安装依赖及构建node应用\nRUN npm install\nRUN npm build\n\n# 配置系统变量，指定端口\nENV HOST 0.0.0.0\nENV PORT 8081\n\n# 将端口8081开放\nEXPOSE 8081\n\n# 容器启动命令\nCMD ["npm", "start"]\n')])])]),r("h2",{attrs:{id:"构建镜像-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像-2"}},[e._v("#")]),e._v(" 构建镜像")]),e._v(" "),r("p",[e._v("在 Dockerfile 所在目录执行 docker build 命令，构建镜像。\n"),r("code",[e._v("docker build --rm -t orderui:20180531 .")]),e._v("\n其中，--rm 是删除构建过程中，产生的临时镜像，-t 是指定镜像名称及标识，如：orderui:20180531，最后. 代表默认选择 Dockerfile 为构建文件。")]),e._v(" "),r("h2",{attrs:{id:"创建容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建容器"}},[e._v("#")]),e._v(" 创建容器")]),e._v(" "),r("p",[r("code",[e._v("docker run -p 8081:8081 --name orderui -d orderui:20180531")]),e._v("\n-p 是指定端口映射，--name 给容器命名，-d 后台执行")]),e._v(" "),r("p",[e._v("稍等片刻，等 npm start 执行完毕后，即可访问。")]),e._v(" "),r("h1",{attrs:{id:"demo"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" demo")]),e._v(" "),r("h2",{attrs:{id:"部署-node"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#部署-node"}},[e._v("#")]),e._v(" 部署 node")]),e._v(" "),r("p",[e._v("https://www.cnblogs.com/pass245939319/p/8473861.html")])])}),[],!1,null,null,null);r.default=t.exports}}]);