(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{465:function(t,s,a){"use strict";a.r(s);var e=a(3),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("h2",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1. 概述")]),t._v(" "),s("p",[t._v("正则表达式用于文本内容的查找和替换。"),s("a",{attrs:{href:"https://regexr.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式在线工具"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_2-匹配单个字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-匹配单个字符"}},[t._v("#")]),t._v(" 2. 匹配单个字符")]),t._v(" "),s("p",[s("strong",[t._v(".")]),t._v(" 可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；")]),t._v(" "),s("p",[s("strong",[t._v(".")]),t._v(" 是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，在 . 前面加上 \\ 。")]),t._v(" "),s("p",[t._v("正则表达式一般是区分大小写的，但是也有些实现是不区分。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("nam.\n")])])]),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("p",[t._v("My "),s("strong",[t._v("name")]),t._v(" is Zheng.")]),t._v(" "),s("h2",{attrs:{id:"_3-匹配一组字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-匹配一组字符"}},[t._v("#")]),t._v(" 3. 匹配一组字符")]),t._v(" "),s("p",[s("strong",[t._v("[ ]")]),t._v(" 定义一个字符集合；")]),t._v(" "),s("p",[t._v("0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。")]),t._v(" "),s("p",[s("strong",[t._v("-")]),t._v(" 只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；")]),t._v(" "),s("p",[s("strong",[t._v("^")]),t._v(" 在 [ ] 中是取非操作。")]),t._v(" "),s("p",[s("strong",[t._v("应用")])]),t._v(" "),s("p",[t._v("匹配以 abc 为开头，并且最后一个字母不为数字的字符串：")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("abc[^0-9]\n")])])]),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("abcd")])]),t._v(" "),s("li",[t._v("abc1")]),t._v(" "),s("li",[t._v("abc2")])]),t._v(" "),s("h2",{attrs:{id:"_4-使用元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用元字符"}},[t._v("#")]),t._v(" 4. 使用元字符")]),t._v(" "),s("h3",{attrs:{id:"匹配空白字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配空白字符"}},[t._v("#")]),t._v(" 匹配空白字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("[\\b]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("回退（删除）一个字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\f")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("换页符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\n")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("换行符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\r")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("回车符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\t")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("制表符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\v")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("垂直制表符")])])])]),t._v(" "),s("p",[t._v("\\r\\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \\n。")]),t._v(" "),s("p",[t._v("\\r\\n\\r\\n 可以匹配 Windows 下的空白行，因为它匹配两个连续的行尾标签，而这正是两条记录之间的空白行；")]),t._v(" "),s("h3",{attrs:{id:"匹配特定的字符类别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配特定的字符类别"}},[t._v("#")]),t._v(" 匹配特定的字符类别")]),t._v(" "),s("h4",{attrs:{id:"数字元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字元字符"}},[t._v("#")]),t._v(" 数字元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\d")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("数字字符，等价于 [0-9]")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\D")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("非数字字符，等价于 [^0-9]")])])])]),t._v(" "),s("h4",{attrs:{id:"字母数字元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字母数字元字符"}},[t._v("#")]),t._v(" 字母数字元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\w")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\W")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对 \\w 取非")])])])]),t._v(" "),s("h4",{attrs:{id:"空白字符元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空白字符元字符"}},[t._v("#")]),t._v(" 空白字符元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\s")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("任何一个空白字符，等价于 [\\f\\n\\r\\t\\v]")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\S")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对 \\s 取非")])])])]),t._v(" "),s("p",[t._v("\\x 匹配十六进制字符，\\0 匹配八进制，例如 \\x0A 对应 ASCII 字符 10，等价于 \\n。")]),t._v(" "),s("h2",{attrs:{id:"_5-重复匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-重复匹配"}},[t._v("#")]),t._v(" 5. 重复匹配")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("\\+")]),t._v(" 匹配 1 个或者多个字符")]),t._v(" "),s("li",[t._v("**** * 匹配 0 个或者多个")]),t._v(" "),s("li",[s("code",[t._v("*?")]),t._v(" 匹配 0 个或者 1 个")])]),t._v(" "),s("p",[s("strong",[t._v("应用")])]),t._v(" "),s("p",[t._v("匹配邮箱地址。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[\\w.]+@\\w+\\.\\w+\n")])])]),s("p",[t._v("[\\w.] 匹配的是字母数字或者 . ，在其后面加上 + ，表示匹配多次。在字符集合 [ ] 里，. 不是元字符；")]),t._v(" "),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("p",[s("strong",[t._v("abc.def"),s("span",[t._v("@")]),t._v("qq.com")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("{n}")]),t._v(" 匹配 n 个字符")]),t._v(" "),s("li",[s("strong",[t._v("{m, n}")]),t._v(" 匹配 m~n 个字符")]),t._v(" "),s("li",[s("strong",[t._v("{m,}")]),t._v(" 至少匹配 m 个字符")])]),t._v(" "),s("p",[t._v("* 和 + 都是贪婪型元字符，会匹配尽可能多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m, n}? 。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a.+c\n")])])]),s("p",[t._v("由于 + 是贪婪型的，因此 .+ 会匹配更可能多的内容，所以会把整个 abcabcabc 文本都匹配，而不是只匹配前面的 abc 文本。用懒惰型可以实现匹配前面的。")]),t._v(" "),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("p",[s("strong",[t._v("abcabcabc")])]),t._v(" "),s("h2",{attrs:{id:"_6-位置匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-位置匹配"}},[t._v("#")]),t._v(" 6. 位置匹配")]),t._v(" "),s("h3",{attrs:{id:"单词边界"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单词边界"}},[t._v("#")]),t._v(" 单词边界")]),t._v(" "),s("p",[s("strong",[t._v("\\b")]),t._v(" 可以匹配一个单词的边界，边界是指位于 \\w 和 \\W 之间的位置；"),s("strong",[t._v("\\B")]),t._v(" 匹配一个不是单词边界的位置。")]),t._v(" "),s("p",[t._v("\\b 只匹配位置，不匹配字符，因此 \\babc\\b 匹配出来的结果为 3 个字符。")]),t._v(" "),s("h3",{attrs:{id:"字符串边界"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串边界"}},[t._v("#")]),t._v(" 字符串边界")]),t._v(" "),s("p",[s("strong",[t._v("^")]),t._v(" 匹配整个字符串的开头，"),s("strong",[t._v("$")]),t._v(" 匹配结尾。")]),t._v(" "),s("p",[t._v("^ 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。")]),t._v(" "),s("p",[t._v("分行匹配模式（multiline）下，换行被当做字符串的边界。")]),t._v(" "),s("p",[s("strong",[t._v("应用")])]),t._v(" "),s("p",[t._v("匹配代码中以 // 开始的注释行")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("^\\s*\\/\\/.*$\n")])])]),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("ol",[s("li",[t._v("public void fun() {")]),t._v(" "),s("li",[s("strong",[t._v("// 注释 1")])]),t._v(" "),s("li",[t._v("     int a = 1;")]),t._v(" "),s("li",[t._v("     int b = 2;")]),t._v(" "),s("li",[s("strong",[t._v("// 注释 2")])]),t._v(" "),s("li",[t._v("     int c = a + b;")]),t._v(" "),s("li",[t._v("}")])]),t._v(" "),s("h2",{attrs:{id:"_7-使用子表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-使用子表达式"}},[t._v("#")]),t._v(" 7. 使用子表达式")]),t._v(" "),s("p",[t._v("使用 "),s("strong",[t._v("( )")]),t._v(" 定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。")]),t._v(" "),s("p",[t._v("子表达式可以嵌套，但是嵌套层次过深会变得很难理解。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(ab){2,}\n")])])]),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("p",[s("strong",[t._v("ababab")])]),t._v(" "),s("p",[s("strong",[t._v("|")]),t._v(" 是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(19|20)\\d{2}\n")])])]),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("1900")])]),t._v(" "),s("li",[s("strong",[t._v("2010")])]),t._v(" "),s("li",[t._v("1020")])]),t._v(" "),s("p",[s("strong",[t._v("应用")])]),t._v(" "),s("p",[t._v("匹配 IP 地址。")]),t._v(" "),s("p",[t._v("IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：")]),t._v(" "),s("ul",[s("li",[t._v("一位数字")]),t._v(" "),s("li",[t._v("不以 0 开头的两位数字")]),t._v(" "),s("li",[t._v("1 开头的三位数")]),t._v(" "),s("li",[t._v("2 开头，第 2 位是 0-4 的三位数")]),t._v(" "),s("li",[t._v("25 开头，第 3 位是 0-5 的三位数")])]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("((25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))\\.){3}(25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))\n")])])]),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("192.168.0.1")])]),t._v(" "),s("li",[t._v("00.00.00.00")]),t._v(" "),s("li",[t._v("555.555.555.555")])]),t._v(" "),s("h2",{attrs:{id:"_8-回溯引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-回溯引用"}},[t._v("#")]),t._v(" 8. 回溯引用")]),t._v(" "),s("p",[t._v("回溯引用使用 "),s("strong",[t._v("\\n")]),t._v(" 来引用某个子表达式，其中 n 代表的是子表达式的序号，从 1 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 abc，那么回溯引用部分也需要匹配 abc 。")]),t._v(" "),s("p",[s("strong",[t._v("应用")])]),t._v(" "),s("p",[t._v("匹配 HTML 中合法的标题元素。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("p",[t._v("\\1 将回溯引用子表达式 (h[1-6]) 匹配的内容，也就是说必须和子表达式匹配的内容一致。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<(h[1-6])>\\w*?<\\/\\1>\n")])])]),s("p",[s("strong",[t._v("匹配结果")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("<h1>x</h1>")])]),t._v(" "),s("li",[s("strong",[t._v("<h2>x</h2>")])]),t._v(" "),s("li",[t._v("<h3>x</h1>")])]),t._v(" "),s("h3",{attrs:{id:"替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#替换"}},[t._v("#")]),t._v(" 替换")]),t._v(" "),s("p",[t._v("需要用到两个正则表达式。")]),t._v(" "),s("p",[s("strong",[t._v("应用")])]),t._v(" "),s("p",[t._v("修改电话号码格式。")]),t._v(" "),s("p",[s("strong",[t._v("文本")])]),t._v(" "),s("p",[t._v("313-555-1234")]),t._v(" "),s("p",[s("strong",[t._v("查找正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(\\d{3})(-)(\\d{3})(-)(\\d{4})\n")])])]),s("p",[s("strong",[t._v("替换正则表达式")])]),t._v(" "),s("p",[t._v("在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("($1) $3-$5\n")])])]),s("p",[s("strong",[t._v("结果")])]),t._v(" "),s("p",[t._v("(313) 555-1234")]),t._v(" "),s("h3",{attrs:{id:"大小写转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大小写转换"}},[t._v("#")]),t._v(" 大小写转换")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\l")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("把下个字符转换为小写")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\u")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("把下个字符转换为大写")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\L")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("把\\L 和\\E 之间的字符全部转换为小写")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\U")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("把\\U 和\\E 之间的字符全部转换为大写")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\E")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("结束\\L 或者\\U")])])])]),t._v(" "),s("p",[s("strong",[t._v("应用")])]),t._v(" "),s("p",[t._v("把文本的第二个和第三个字符转换为大写。")]),t._v(" "),s("p",[s("strong",[t._v("文本")])]),t._v(" "),s("p",[t._v("abcd")]),t._v(" "),s("p",[s("strong",[t._v("查找")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(\\w)(\\w{2})(\\w)\n")])])]),s("p",[s("strong",[t._v("替换")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$1\\U$2\\E$3\n")])])]),s("p",[s("strong",[t._v("结果")])]),t._v(" "),s("p",[t._v("aBCd")]),t._v(" "),s("h2",{attrs:{id:"_9-前后查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-前后查找"}},[t._v("#")]),t._v(" 9. 前后查找")]),t._v(" "),s("p",[t._v("前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。向前查找用 "),s("strong",[t._v("?=")]),t._v(" 来定义，它规定了尾部匹配的内容，这个匹配的内容在 ?= 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 ?<= 定义（注: javaScript 不支持向后匹配, java 对其支持也不完善）。")]),t._v(" "),s("p",[s("strong",[t._v("应用")])]),t._v(" "),s("p",[t._v("查找出邮件地址 @ 字符前面的部分。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\\w+(?=@)\n")])])]),s("p",[s("strong",[t._v("结果")])]),t._v(" "),s("p",[s("strong",[t._v("abc")]),t._v(" @qq.com")]),t._v(" "),s("p",[t._v("对向前和向后查找取非，只要把 = 替换成 ! 即可，比如 (?=) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。")]),t._v(" "),s("h2",{attrs:{id:"_10-嵌入条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-嵌入条件"}},[t._v("#")]),t._v(" 10. 嵌入条件")]),t._v(" "),s("h3",{attrs:{id:"回溯引用条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯引用条件"}},[t._v("#")]),t._v(" 回溯引用条件")]),t._v(" "),s("p",[t._v("条件判断为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("p",[t._v("子表达式 (\\() 匹配一个左括号，其后的 ? 表示匹配 0 个或者 1 个。 ?(1) 为条件，当子表达式 1 匹配时条件成立，需要执行 ) 匹配，也就是匹配右括号。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(\\()?abc(?(1)\\))\n")])])]),s("p",[s("strong",[t._v("结果")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("(abc)")])]),t._v(" "),s("li",[s("strong",[t._v("abc")])]),t._v(" "),s("li",[t._v("(abc")])]),t._v(" "),s("h3",{attrs:{id:"前后查找条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前后查找条件"}},[t._v("#")]),t._v(" 前后查找条件")]),t._v(" "),s("p",[t._v("条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式")])]),t._v(" "),s("p",[t._v("?(?=-) 为前向查找条件，只有在以 - 为前向查找的结尾能匹配 \\d{5} ，才继续匹配 -\\d{4} 。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\\d{5}(?(?=-)-\\d{4})\n")])])]),s("p",[s("strong",[t._v("结果")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("11111")])]),t._v(" "),s("li",[t._v("22222-")]),t._v(" "),s("li",[s("strong",[t._v("33333-4444")])])]),t._v(" "),s("h4",{attrs:{id:"创建正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式"}},[t._v("#")]),t._v(" 创建正则表达式")]),t._v(" "),s("ol",[s("li",[t._v("使用一个正则表达式字面量")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[a-zA-Z]+[0-9]*\\W?_$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gi")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("调用 RegExp 对象的构造函数")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"特殊字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),s("ul",[s("li",[t._v("^ 匹配输入的开始")]),t._v(" "),s("li",[t._v("$ 匹配输入的结束")]),t._v(" "),s("li",[t._v("* 0 次或多次 {0，}")]),t._v(" "),s("li",[t._v("+ 1 次或多次 {1，}")]),t._v(" "),s("li",[t._v("?\n"),s("ul",[s("li",[t._v("0 次或者 1 次 {0,1}。")]),t._v(" "),s("li",[t._v("用于先行断言")]),t._v(" "),s("li",[t._v("如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪\n"),s("ul",[s("li",[t._v('对 "123abc" 用 /\\d+/ 将会返回 "123"，')]),t._v(" "),s("li",[t._v('用 /\\d+?/,那么就只会匹配到 "1"。')])])])])]),t._v(" "),s("li",[t._v(". 匹配除换行符之外的任何单个字符")]),t._v(" "),s("li",[t._v("(x) 匹配 'x' 并且记住匹配项")]),t._v(" "),s("li",[t._v("(?:x) 匹配 'x' 但是不记住匹配项")]),t._v(" "),s("li",[t._v("x(?=y) 配'x'仅仅当'x'后面跟着'y'.这种叫做正向肯定查找。")]),t._v(" "),s("li",[t._v("x(?!y) 匹配'x'仅仅当'x'后面不跟着'y',这个叫做正向否定查找。")]),t._v(" "),s("li",[t._v("x|y 匹配‘x’或者‘y’。")]),t._v(" "),s("li",[t._v("{n} 重复 n 次")]),t._v(" "),s("li",[t._v("{n, m} 匹配至少 n 次，最多 m 次")]),t._v(" "),s("li",[t._v("[xyz] 代表 x 或 y 或 z")]),t._v(" "),s("li",[t._v("[^xyz] 不是 x 或 y 或 z")]),t._v(" "),s("li",[t._v("\\d 数字")]),t._v(" "),s("li",[t._v("\\D 非数字")]),t._v(" "),s("li",[t._v("\\s 空白字符，包括空格、制表符、换页符和换行符。")]),t._v(" "),s("li",[t._v("\\S 非空白字符")]),t._v(" "),s("li",[t._v("\\w 单词字符（字母、数字或者下划线） [A-Za-z0-9_]")]),t._v(" "),s("li",[t._v("\\W 非单字字符。[^a-za-z0-9_]")]),t._v(" "),s("li",[t._v("\\3 表示第三个分组")]),t._v(" "),s("li",[t._v("\\b 词的边界\n"),s("ul",[s("li",[t._v("/\\bm/匹配“moon”中得‘m’；")])])]),t._v(" "),s("li",[t._v("\\B 非单词边界")])]),t._v(" "),s("h4",{attrs:{id:"使用正则表达式的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用正则表达式的方法"}},[t._v("#")]),t._v(" 使用正则表达式的方法")]),t._v(" "),s("ul",[s("li",[t._v("exec 一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。")]),t._v(" "),s("li",[t._v("test 一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。")]),t._v(" "),s("li",[t._v("match 一个在字符串中执行查找匹配的 String 方法，它返回一个数组或者在未匹配到时返回 null。")]),t._v(" "),s("li",[t._v("search 一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回-1。")]),t._v(" "),s("li",[t._v("replace 一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。")]),t._v(" "),s("li",[t._v("split 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。")])]),t._v(" "),s("h4",{attrs:{id:"练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),s("p",[t._v("匹配结尾的数字")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("统一空格个数\n字符串内如有空格，但是空格的数量可能不一致，通过正则将空格的个数统一变为一个。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\s+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("判断字符串是不是由数字组成")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\d+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("电话号码正则")]),t._v(" "),s("ul",[s("li",[t._v("区号必填为 3-4 位的数字")]),t._v(" "),s("li",[t._v("区号之后用“-”与电话号码连接电话号码为 7-8 位的数字")]),t._v(" "),s("li",[t._v("分机号码为 3-4 位的数字，非必填，但若填写则以“-”与电话号码相连接")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\d{3,4}-\\d{7,8}(-\\d{3,4})?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("手机号码正则表达式\n正则验证手机号，忽略前面的 0，支持 130-139，150-159。忽略前面 0 之后判断它是 11 位的。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^0*1(3|5)\\d{9}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("使用正则表达式实现删除字符串中的空格")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\s+|\\s+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("限制文本框只能输入数字和两位小数点等等")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\d*\\.\\d{0,2}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("只能输入小写的英文字母和小数点，和冒号，正反斜杠(：./)")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[a-z\\.:\\/\\\\]*$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("替换小数点前内容为指定内容\n例如：infomarket.php?id=197 替换为 test.php?id=197")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[^\\.]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'---------'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("只匹配中文的正则表达式")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[\\u4E00-\\u9FA5\\uf900-\\ufa2d]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gi")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("返回字符串的中文字符个数\n先去掉非中文字符，再返回 length 属性。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[^\\u4E00-\\u9FA5\\uf900-\\ufa2d]")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//匹配非中文的正则表达式")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("正则表达式取得匹配 IP 地址前三段\n只要匹配掉最后一段并且替换为空字符串就行了")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPreThrstr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\.\\d{1,3}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("匹配"),s("ul",[t._v("与")]),t._v("之间的内容")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ul"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\s\\"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ul>")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v("\n")])])]),s("p",[t._v("用正则表达式获得文件名\nc:\\images\\tupian\\006.jpg\n可能是直接在盘符根目录下，也可能在好几层目录下，要求替换到只剩文件名。\n首先匹配非左右斜线字符 0 或多个，然后是左右斜线一个或者多个。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFileName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[^\\\\\\/]*[\\\\\\/]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// xxx\\ 或是 xxx/")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v('绝对路径变相对路径\n"http://23.123.22.12/image/somepic.gif"转换为："/image/somepic.gif"')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("http:\\/\\/[^\\/]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("用户名正则\n用于用户名注册，，用户名只 能用 中文、英文、数字、下划线、4-16 个字符。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[\\u4E00-\\u9FA5\\uf900-\\ufa2d\\w]{4,16}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v('匹配英文地址\n规则如下:\n包含 "点", "字母","空格","逗号","数字"，但开头和结尾不能是除字母外任何字符。')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[a-zA-Z][\\.a-zA-Z,0-9]*[a-zA-Z]$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("正则匹配价格\n开头数字若干位，可能有一个小数点，小数点后面可以有两位数字。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\d+(\\.\\d{2})?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("身份证号码的匹配\n身份证号码可以是 15 位或者是 18 位，其中最后一位可以是 X。其它全是数字")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(\\d{14}|\\d{17})(X|x)$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("单词首字母大写\n每单词首字大写，其他小写。如 blue idea 转换为 Blue Idea，BLUE IDEA 也转换为 Blue Idea")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("firstCharUpper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b(\\w)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("正则验证日期格式\nyyyy-mm-dd 格式\n4 位数字，横线，1 或者 2 位数字，再横线，最后又是 1 或者 2 位数字。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\d{4}-\\d{1,2}-\\d{1,2}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("去掉文件的后缀名\nwww.abc.com/dc/fda.asp 变为 www.abc.com/dc/fda")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\.\\w$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("验证邮箱的正则表达式\n开始必须是一个或者多个单词字符或者是-，加上@，然后又是一个或者多个单词字符或者是-。然后是点“.”和单词字符和-的组合，可以有一个或者\n多个组合。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[\\w-]+@\\w+\\.\\w+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("正则判断标签是否闭合\n例如：<img xxx=”xxx” 就是没有闭合的标签；")]),t._v(" "),s("p",[t._v("p的内容，同样也是没闭合的标签。\n")]),s("p",[t._v("标签可能有两种方式闭合，"),s("img",{attrs:{xxx:"”xxx”"}}),t._v(" 或者是")]),s("p",[t._v(" xxx ")]),t._v("。"),s("p"),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v('<([a-z]+)(\\s*\\w*?\\s*=\\s*".+?")*(\\s*?>[\\s\\S]*?(<\\/\\1>)+|\\s*\\/>)')]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("正则判断是否为数字与字母的混合\n不能小于 12 位，且必须为字母和数字的混")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(([a-z]+[0-9]+)|([0-9]+[a-z]+))[a-z0-9]*$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("将阿拉伯数字替换为中文大写形式")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceReg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'零'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'壹'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'贰'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'叁'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'肆'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'伍'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'陆'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'柒'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'捌'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'玖'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("去掉标签的所有属性")]),t._v(" "),s("td",{staticStyle:{width:"23px",height:"26px"},attrs:{align:"left"}},[t._v("***")]),t._v("\n变成没有任何属性的\n"),s("td",[t._v("***")]),t._v("\n思路：非捕获匹配属性，捕获匹配标签，使用捕获结果替换掉字符串。正则如下：\n```js\n/("),t._v('".+?")*?\\s*?(>)/\n```\n'),s("h4",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v(".")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("匹配任意字符除了换行符和回车符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("匹配方括号内的任意字符。比如 [0-9] 就可以用来匹配任意数字")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("^")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("^9，这样使用代表匹配以 9 开头。["),s("code",[t._v("^")]),t._v("9]，这样使用代表不匹配方括号内除了 9 的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("{1, 2}")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("匹配 1 到 2 位字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("(yck)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("只匹配和 yck 相同字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("|")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("匹配 | 前后任意字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("转义")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("*")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("只匹配出现 0 次及以上 * 前的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("+")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("只匹配出现 1 次及以上 + 前的字符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("?")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("? 之前字符可选")])])])]),t._v(" "),s("h4",{attrs:{id:"修饰语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰语"}},[t._v("#")]),t._v(" 修饰语")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("修饰语")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("i")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("忽略大小写")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("g")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("全局搜索")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("m")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("多行")])])])]),t._v(" "),s("h4",{attrs:{id:"字符简写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符简写"}},[t._v("#")]),t._v(" 字符简写")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("简写")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\w")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("匹配字母数字或下划线")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\W")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("和上面相反")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\s")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("匹配任意的空白符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\S")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("和上面相反")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\d")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("匹配数字")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\D")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("和上面相反")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\b")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("匹配单词的开始或结束")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("\\B")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("和上面相反")])])])]),t._v(" "),s("h4",{attrs:{id:"网站"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网站"}},[t._v("#")]),t._v(" 网站")]),t._v(" "),s("p",[t._v("https://www.cnblogs.com/moqiutao/p/6513628.html")]),t._v(" "),s("h3",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),s("h4",{attrs:{id:"将下面的字符串-每隔三个字符添加一个空格。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将下面的字符串-每隔三个字符添加一个空格。"}},[t._v("#")]),t._v(" 将下面的字符串，每隔三个字符添加一个空格。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'seregesbgfsert'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("看到这道题目的时候，首先想到的解决办法应该是正则表达式，如果是数组的操作那就错了。")])]),t._v(" "),s("blockquote",[s("p",[t._v("个人答案")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" string.replace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/g, "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v(' "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wefe trsb dfrh y"')]),t._v("\n")])])]),s("h4",{attrs:{id:"写一个函数验证手机号合法性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写一个函数验证手机号合法性"}},[t._v("#")]),t._v(" 写一个函数验证手机号合法性")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'15010585812'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^1\\d{10}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 目前手机号码的范围是")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"写一个函数-将-url-参数转换为对象返回-考虑参数有小数点的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写一个函数-将-url-参数转换为对象返回-考虑参数有小数点的情况"}},[t._v("#")]),t._v(" 写一个函数，将 URL 参数转换为对象返回（考虑参数有小数点的情况）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" params "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("([\\?|&|]\\w*=[\\w\\.]*)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  params"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.baidu.com/login?username=hehe&password=123456&num=12.4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("num")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12.4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("password")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("username")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hehe"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"写一个-email-的验证-搜狗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写一个-email-的验证-搜狗"}},[t._v("#")]),t._v(" 写一个 email 的验证(搜狗)")]),t._v(" "),s("p",[s("code",[t._v('/^[\\w|\\d|-|_|\\.]+@[\\d|\\w|-]+(\\.[\\w|\\d|-]+)*\\.[\\w|\\d]{2,6}$/.test("1204183885@qq.com")')])]),t._v(" "),s("blockquote",[s("p",[t._v("规则：")]),t._v(" "),s("ul",[s("li",[t._v("开头是字母（a-zA-Z）或者数字、中划线、下划线或者是点")]),t._v(" "),s("li",[t._v("@后可以是字母、数组或者中划线")])])]),t._v(" "),s("h4",{attrs:{id:"校验填入的内容只能为汉字、数字和字母"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#校验填入的内容只能为汉字、数字和字母"}},[t._v("#")]),t._v(" 校验填入的内容只能为汉字、数字和字母")]),t._v(" "),s("p",[s("code",[t._v("/^[\\u4e00-\\u9fa50-9a-zA-Z]*$/.test('123木头人er')")])]),t._v(" "),s("h4",{attrs:{id:"校验数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#校验数字"}},[t._v("#")]),t._v(" 校验数字")]),t._v(" "),s("p",[s("code",[t._v("/^[0-9]+(.[0-9]+)?$/.test()")])]),t._v(" "),s("h4",{attrs:{id:"移除字符串首尾空白"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移除字符串首尾空白"}},[t._v("#")]),t._v(" 移除字符串首尾空白")]),t._v(" "),s("p",[s("code",[t._v('str.replace(/^\\s+|\\s+$/, "");')])]),t._v(" "),s("blockquote",[s("p",[t._v("去除字符串中的所有空白"),s("code",[t._v('str.replace(/\\s+/g, "");')])])]),t._v(" "),s("h4",{attrs:{id:"网址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网址"}},[t._v("#")]),t._v(" 网址")]),t._v(" "),s("p",[t._v("https://zhuanlan.zhihu.com/p/33608746\nhttps://www.imooc.com/article/3591\nhttps://juejin.im/post/5aab72fd518825188038af9b")]),t._v(" "),s("h4",{attrs:{id:"正则表达式-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式-2"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("p",[t._v("相加:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var a=/a/gi;\nvar b=/b/gi;\nvar c=new RegExp(a.source+b.source,'gi');\n")])])]),s("p",[t._v("正则表达式 "),s("code",[t._v("g")]),t._v(" 符号一次执行之后，会带有一个标记，下一次再执行是从这个标记开始的，而不是从头，所以说 "),s("code",[t._v("g")]),t._v(" 的正则表达式最好不要多次执行。")]),t._v(" "),s("h4",{attrs:{id:"菜鸟正则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#菜鸟正则"}},[t._v("#")]),t._v(" 菜鸟正则 ？？？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1 次或多次）。")])]),t._v(" "),s("li",[s("p",[t._v("runoo"),s("em",[t._v("b，可以匹配 runob、runoob、runoooooob 等，")]),t._v(" 号代表字符可以不出现，也可以出现一次或者多次（0 次、或 1 次、或多次）。")])]),t._v(" "),s("li",[s("p",[t._v("colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0 次、或 1 次）。")]),t._v(" "),s("p",[t._v("\\f 匹配一个换页符。等价于 \\x0c 和 \\cL。\n\\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。\n\\r 匹配一个回车符。等价于 \\x0d 和 \\cM。\n\\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。\n\\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。")]),t._v(" "),s("p",[t._v("$ 字符串的结尾\n^ 字符串的开头\n( )标记一个子表达式的开始和结束位置 *匹配前面的子表达式零次或多次 +匹配前面的子表达式一次或多次\n.匹配除换行符 \\n 之外的任何单字符\n?匹配前面的子表达式零次或一次\n|指明两项之间的一个选择。")]),t._v(" "),s("p",[t._v("*、+和?限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。")]),t._v(" "),s("p",[t._v("限定符\n限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共 6 种。")]),t._v(" "),s("p",[t._v("定位符\n定位符使您能够将正则表达式固定到行首或行尾。")]),t._v(" "),s("p",[t._v("^ 匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。\n$\t匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。\n\\b 匹配一个字边界，即字与空格间的位置。")])])]),t._v(" "),s("h4",{attrs:{id:"怎么用正则去除字符串前后空格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么用正则去除字符串前后空格"}},[t._v("#")]),t._v(" 怎么用正则去除字符串前后空格")]),t._v(" "),s("h4",{attrs:{id:"手写一个正则表达式验证邮箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手写一个正则表达式验证邮箱"}},[t._v("#")]),t._v(" 手写一个正则表达式验证邮箱")]),t._v(" "),s("h4",{attrs:{id:"js-正则表达式-判断字符串是否是在中文-是否包含中文-是否不包含特殊字符-是否是纯中文等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-正则表达式-判断字符串是否是在中文-是否包含中文-是否不包含特殊字符-是否是纯中文等"}},[t._v("#")]),t._v(" js 正则表达式，判断字符串是否是在中文， 是否包含中文，是否不包含特殊字符，是否是纯中文等")]),t._v(" "),s("p",[t._v("https://www.cnblogs.com/Garnett-Boy/p/6010850.html")]),t._v(" "),s("h2",{attrs:{id:"replace-的几个特殊字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace-的几个特殊字符串"}},[t._v("#")]),t._v(" replace 的几个特殊字符串")]),t._v(" "),s("p",[t._v("还有其它两个 $` 和 $'。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("$&")]),t._v(" 最后匹配的字符.")]),t._v(" "),s("li",[t._v("`$`` 最后匹配到的字符之前的字符.")]),t._v(" "),s("li",[s("code",[t._v("$'")]),t._v(" 最后匹配到的字符之后的字符.")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("'--1++'.replace( /1/, '$`' ); // ----++\n'--1++'.replace( /1/, '$\\''); // --++++\n'-1+'.replace( /1/, '$&'); // -1+\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);